name: Package with PyInstaller
on:
  push:
  workflow_dispatch:
jobs:
  build-client:
    name: Build client on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows]
        include:
          - os: ubuntu
            runner: ubuntu-latest
          - os: windows
            runner: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.FRONTEND_PAT }}

      - name: Setup client dist cache
        id: client_cache
        uses: actions/cache@v3
        with:
          path: apcalt_python/static
          key: client-static-${{ matrix.os }}-${{ hashFiles('client/**') }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18.13.0
        if: steps.client_cache.outputs.cache-hit != 'true'

      - name: Get Node.js version
        id: node_version
        run: echo version=$(node --version) >> $GITHUB_OUTPUT
        if: steps.client_cache.outputs.cache-hit != 'true'

      - name: Setup Node.js cache
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: client-node_modules-${{ steps.node_version.outputs.version }}-${{ hashFiles('client/**/package-lock.json') }}
        if: steps.client_cache.outputs.cache-hit != 'true'

      - name: Compile client
        run: make
        if: steps.client_cache.outputs.cache-hit != 'true'

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    needs: build-client
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, macos]
        include:
          - os: linux
            runner: ubuntu-latest
            client_key: ubuntu
          - os: windows
            runner: windows-latest
            client_key: windows
          - os: macos
            runner: macOS-latest
            client_key: ubuntu
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.FRONTEND_PAT }}

      - name: Load client dist
        id: load_client
        uses: actions/cache/restore@v3
        with:
          path: apcalt_python/static
          key: client-static-${{ matrix.client_key }}-${{ hashFiles('client/**') }}

      - name: Check client dist loaded
        run: exit 1
        if: steps.load_client.outputs.cache-hit != 'true'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.8.2 python - -y

      - name: A little hackery for MacOS
        if: ${{ matrix.os == 'macos' }}
        run: sed -ie 's/chosen =/self._env.supported_tags.sort(key=lambda x:"universal2" not in str(x));chosen =/' ~/Library/Application\ Support/pypoetry/venv/lib/python3.*/site-packages/poetry/installation/chooser.py

      - name: Update PATH
        if: ${{ matrix.os != 'windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update PATH for Windows
        if: ${{ matrix.os == 'windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Setup Python cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ matrix.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with actions

      - name: Run PyInstaller
        if: ${{ matrix.os != 'macos' }}
        run: poetry run pyinstaller -n apcalt-python-${{ matrix.os }} --collect-all apcalt_python apcalt_python/_entrypoint.py -F

      - name: Run PyInstaller for Mac OS
        if: ${{ matrix.os == 'macos' }}
        run: poetry run pyinstaller -n apcalt-python-${{ matrix.os }} --collect-all apcalt_python apcalt_python/_entrypoint.py -F --target-arch universal2

      - name: Add executable bit
        if: ${{ matrix.os != 'windows' }}
        run: chmod +x dist/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apcalt-python-${{ matrix.os }}
          path: dist

  release:
    name: Publish nightly release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      actions: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: pip

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Release nightly build
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: nightly
          prerelease: true
          title: Nightly Release
          files: apcalt-python-*/*
