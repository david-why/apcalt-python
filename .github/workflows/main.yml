name: Package with PyInstaller
on:
  push:
  workflow_dispatch:
jobs:
  build-client:
    name: Build client on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows]
        include:
          - os: ubuntu
            runner: ubuntu-latest
          - os: windows
            runner: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.FRONTEND_PAT }}

      - name: Setup client dist cache
        id: client_cache
        uses: actions/cache@v3
        with:
          path: apcalt_python/static
          key: client-static-${{ matrix.os }}-${{ hashFiles('client/**') }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 18.13.0
        if: steps.client_cache.outputs.cache-hit != 'true'

      - name: Get Node.js version
        id: node_version
        run: echo version=$(node --version) >> $GITHUB_OUTPUT
        if: steps.client_cache.outputs.cache-hit != 'true'

      - name: Setup Node.js cache
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: client-node_modules-${{ steps.node_version.outputs.version }}-${{ hashFiles('client/**/package-lock.json') }}
        if: steps.client_cache.outputs.cache-hit != 'true'

      - name: Compile client
        run: make
        if: steps.client_cache.outputs.cache-hit != 'true'

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    needs: build-client
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, macos-x86_64]
        include:
          - os: linux
            runner: ubuntu-latest
            zip_name: linux
            client_key: ubuntu
          - os: windows
            runner: windows-latest
            zip_name: windows
            client_key: windows
          # - os: macos-arm64
          #   target_arch: arm64
          #   shell: arch -arm64 bash {0}
          #   runner: macOS-latest
          #   zip_name: macos-arm64
          - os: macos-x86_64
            target_arch: x86_64
            runner: macOS-latest
            zip_name: macos-x86_64
            client_key: ubuntu
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.FRONTEND_PAT }}

      - name: Load client dist
        id: load_client
        uses: actions/cache/restore@v3
        with:
          path: apcalt_python/static
          key: client-static-${{ matrix.client_key }}-${{ hashFiles('client/**') }}

      - name: Check client dist loaded
        run: exit 1
        if: steps.load_client.outputs.cache-hit != 'true'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'windows' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update PATH for Windows
        if: ${{ matrix.os == 'windows' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Setup Python cache
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ matrix.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with actions

      - name: Run PyInstaller
        if: ${{ matrix.runner != 'macOS-latest' }}
        run: poetry run pyinstaller -n apcalt-python --collect-all apcalt_python apcalt_python/_entrypoint.py -F

      - name: Run PyInstaller for Mac OS
        if: ${{ matrix.runner == 'macOS-latest' }}
        run: poetry run pyinstaller -n apcalt-python --collect-all apcalt_python apcalt_python/_entrypoint.py -F --target-arch ${{ matrix.target_arch }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.zip_name }}
          path: dist
